import { PrismaClient } from '@prisma/client';
import { defaultServicesByBusinessType } from './src/config/default-services';

const prisma = new PrismaClient();

async function addDefaultServicesToExistingCompanies() {
  try {
    console.log('üöÄ Iniciando adi√ß√£o de servi√ßos padr√£o para empresas existentes...\n');

    const companies = await prisma.company.findMany({
      where: {
        businessTypeId: { not: null }
      },
      include: {
        businessType: true,
        services: true,
        serviceTypes: true
      }
    });

    console.log(`üìä Encontradas ${companies.length} empresas com tipo de neg√≥cio definido\n`);

    for (const company of companies) {
      if (!company.businessType) continue;

      const businessTypeName = company.businessType.name;
      const defaultServices = defaultServicesByBusinessType[businessTypeName];

      if (!defaultServices) {
        console.log(`‚ö†Ô∏è  Nenhum servi√ßo padr√£o definido para ${businessTypeName}`);
        continue;
      }

      const existingServiceNames = company.services.map(s => s.name);
      const missingServices = defaultServices.filter(
        ds => !existingServiceNames.includes(ds.name)
      );

      if (missingServices.length === 0) {
        console.log(`‚ÑπÔ∏è  Empresa "${company.name}" (${businessTypeName}) j√° possui todos os ${defaultServices.length} servi√ßos padr√£o`);
        continue;
      }

      console.log(`\nüìù Adicionando ${missingServices.length} servi√ßos faltantes para "${company.name}" (${businessTypeName})...`);

      let serviceType = company.serviceTypes.find(st => st.name === 'Servi√ßos');

      if (!serviceType) {
        serviceType = await prisma.serviceType.create({
          data: {
            companyId: company.id,
            name: 'Servi√ßos',
            description: 'Servi√ßos oferecidos',
            icon: '‚≠ê',
            color: '#14b8a6',
            active: true,
            sortOrder: 0
          }
        });
        console.log(`  ‚úÖ Tipo de servi√ßo "Servi√ßos" criado`);
      }

      let addedCount = 0;
      for (const service of missingServices) {
        await prisma.service.create({
          data: {
            companyId: company.id,
            serviceTypeId: serviceType.id,
            name: service.name,
            duration: service.duration,
            price: service.price,
            description: service.description,
            active: true
          }
        });
        console.log(`  ‚úÖ ${service.name} - R$ ${service.price.toFixed(2)} (${service.duration} min)`);
        addedCount++;
      }

      console.log(`  ‚ú® Total: ${addedCount} servi√ßos adicionados! (Empresa agora tem ${company.services.length + addedCount} servi√ßos)`);
    }

    console.log('\n‚úÖ Processo conclu√≠do com sucesso!');
  } catch (error) {
    console.error('‚ùå Erro ao adicionar servi√ßos:', error);
  } finally {
    await prisma.$disconnect();
  }
}

addDefaultServicesToExistingCompanies();
