// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("SQLITE_URL")
}

// ======================
// MODELS PRINCIPAIS
// ======================

model User {
  id        String   @id @default(cuid())
  fullName  String
  email     String   @unique
  phone     String
  passwordHash String
  role      Role     @default(USER)
  
  // Endereço residencial
  cep           String
  street        String
  number        String
  complement    String?
  neighborhood  String
  city          String
  state         String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  company       Company?
  subscription  Subscription?
  refreshTokens RefreshToken[]
  
  @@map("users")
}

model Company {
  id             String   @id @default(cuid())
  ownerId        String   @unique
  name           String
  phone          String
  businessTypeId String?  // Tipo de negócio da empresa
  
  // Endereço comercial
  cep           String
  street        String
  number        String
  complement    String?
  neighborhood  String
  city          String
  state         String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  owner               User                   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  businessType        BusinessType?          @relation(fields: [businessTypeId], references: [id])
  businessDays        CompanyBusinessDay[]
  subscription        Subscription?
  agendaSettings      AgendaSettings?
  customHolidays      CustomHoliday[]
  holidayBridges      HolidayBridge[]
  dateBlocks          DateBlock[]
  dateUnblocks        DateUnblock[]
  clients             Client[]
  services            Service[]
  serviceTypes        ServiceType[]
  appointments        Appointment[]
  products            Product[]
  transactions        Transaction[]
  records             Record[]
  appointmentHistory  AppointmentHistory[]
  clinicalNotes       ClinicalNote[]
  
  @@map("companies")
}

model Client {
  id          String  @id @default(cuid())
  companyId   String
  fullName    String
  cpf         String?
  phone       String
  email       String
  birthDate   DateTime?
  notes       String?

  flowStep    String? // Passo atual do fluxo do bot

  // Endereço
  cep           String?
  street        String?
  number        String?
  complement    String?
  neighborhood  String?
  city          String?
  state         String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  company            Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  appointments       Appointment[]
  tabData            ClientTabData[]      
  toothTreatments    ToothTreatment[]     
  documents          ClientDocument[]     
  transactions       Transaction[]        
  records            Record[]             
  appointmentHistory AppointmentHistory[] 
  clinicalNotes      ClinicalNote[]       
  
  @@index([companyId])
  @@map("clients")
}

// ======================
// MODELS ADICIONAIS
// ======================

model CompanyBusinessDay {
  id        String    @id @default(cuid())
  companyId String
  day       WeekDay
  enabled   Boolean   @default(true)
  
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@unique([companyId, day])
  @@map("company_business_days")
}

model Plan {
  id          String  @id @default(cuid())
  name        String
  priceCents  Int
  currency    String  @default("BRL")
  description String?
  features    String  // JSON serialized features
  active      Boolean @default(true)
  sortOrder   Int     @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  subscriptions Subscription[]
  
  @@map("plans")
}

model Subscription {
  id         String            @id @default(cuid())
  userId     String            @unique
  companyId  String            @unique
  planId     String
  status     SubscriptionStatus @default(ACTIVE)
  
  startedAt    DateTime  @default(now())
  endsAt       DateTime?
  trialEndsAt  DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  plan    Plan    @relation(fields: [planId], references: [id])
  
  @@map("subscriptions")
}

model RefreshToken {
  id        String    @id @default(cuid())
  userId    String
  tokenHash String    @unique
  expiresAt DateTime
  revokedAt DateTime?
  
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

// ======================
// SERVIÇOS
// ======================

model ServiceType {
  id          String   @id @default(cuid())
  companyId   String
  name        String
  description String?
  icon        String?
  color       String?
  active      Boolean  @default(true)
  sortOrder   Int      @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  company  Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  services Service[]
  
  @@index([companyId])
  @@map("service_types")
}

model Service {
  id            String  @id @default(cuid())
  companyId     String
  name          String
  serviceTypeId String
  duration      Int
  price         Float
  description   String?
  active        Boolean @default(true)
  
  // Disponibilidade por dia da semana
  mondayEnabled    Boolean @default(true)
  tuesdayEnabled   Boolean @default(true)
  wednesdayEnabled Boolean @default(true)
  thursdayEnabled  Boolean @default(true)
  fridayEnabled    Boolean @default(true)
  saturdayEnabled  Boolean @default(true)
  sundayEnabled    Boolean @default(false)
  
  // Horário de funcionamento
  startTime String @default("08:00")
  endTime   String @default("18:00")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  serviceType  ServiceType   @relation(fields: [serviceTypeId], references: [id])
  appointments Appointment[]
  
  @@index([companyId])
  @@map("services")
}

// ======================
// AGENDAMENTOS
// ======================

model Appointment {
  id                String            @id @default(cuid())
  companyId         String
  clientId          String
  serviceId         String
  date              DateTime
  startTime         String
  endTime           String
  status            AppointmentStatus @default(PENDING)
  notes             String?
  paymentMethod     String?
  totalValue        Float
  rescheduledFromId String?
  rescheduledFrom   Appointment?      @relation("RescheduledAppointments", fields: [rescheduledFromId], references: [id], onDelete: SetNull)
  rescheduledTo     Appointment[]     @relation("RescheduledAppointments")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company            Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  client             Client               @relation(fields: [clientId], references: [id])
  service            Service              @relation(fields: [serviceId], references: [id])
  transactions       Transaction[]
  record             Record?
  appointmentHistory AppointmentHistory[]
  clinicalNotes      ClinicalNote[]
  whatsappLogs       WhatsAppLog[]
  
  @@index([companyId])
  @@index([date])
  @@index([status])
  @@map("appointments")
}

model AppointmentHistory {
  id           String   @id @default(cuid())
  appointmentId String
  clientId     String
  companyId    String
  date         DateTime
  servicesData String   @default("[]")
  productsData String   @default("[]")
  paymentMethod String?
  totalValue   Float
  status       String
  notes        String?
  
  createdAt DateTime @default(now())
  
  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  client      Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@index([clientId])
  @@index([companyId])
  @@index([appointmentId])
  @@map("appointment_history")
}

// ======================
// AGENDA SETTINGS
// ======================

model AgendaSettings {
  id                String  @id @default(cuid())
  companyId         String  @unique
  primaryColor      String  @default("#14b8a6")
  secondaryColor    String  @default("#0d9488")
  blockedDayColor   String  @default("rgba(107, 114, 128, 0.3)")
  appointmentColors String  @default("[\"#64B5F6\",\"#81C784\",\"#FFB74D\",\"#9575CD\",\"#4FC3F7\",\"#AED581\",\"#F06292\",\"#FFD54F\",\"#FF8A65\",\"#A5D6A7\",\"#CE93D8\",\"#FFCC02\"]")
  nationalHolidays  Boolean @default(true)
  stateHolidays     Boolean @default(false)
  cityHolidays      Boolean @default(false)
  lunchBreakEnabled Boolean @default(false)
  lunchBreakStart   String?
  lunchBreakEnd     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@map("agenda_settings")
}

model CustomHoliday {
  id        String   @id @default(cuid())
  companyId String
  name      String
  date      DateTime
  type      String   @default("CUSTOM")
  enabled   Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@map("custom_holidays")
}

model HolidayBridge {
  id        String   @id @default(cuid())
  companyId String
  name      String
  startDate DateTime
  endDate   DateTime
  enabled   Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@map("holiday_bridges")
}

model DateBlock {
  id        String   @id @default(cuid())
  companyId String
  title     String
  startDate DateTime
  endDate   DateTime
  type      String   @default("VACATION")
  allDay    Boolean  @default(true)
  startTime String?
  endTime   String?
  enabled   Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@map("date_blocks")
}

model DateUnblock {
  id        String   @id @default(cuid())
  companyId String
  date      DateTime
  reason    String
  enabled   Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@map("date_unblocks")
}

// ======================
// TIPOS DE NEGÓCIO E ABAS
// ======================

model BusinessType {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  icon        String?
  color       String? @default("#14b8a6")
  active      Boolean @default(true)
  sortOrder   Int     @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  companies Company[]
  tabs      BusinessTypeTab[]
  
  @@map("business_types")
}

model BusinessTypeTab {
  id             String  @id @default(cuid())
  businessTypeId String
  name           String
  slug           String
  description    String?
  icon           String?
  color          String?
  isRequired     Boolean @default(false)
  sortOrder      Int     @default(0)
  active         Boolean @default(true)
  fieldConfig    String  @default("{}")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  businessType BusinessType    @relation(fields: [businessTypeId], references: [id], onDelete: Cascade)
  clientData   ClientTabData[]
  
  @@unique([businessTypeId, slug])
  @@map("business_type_tabs")
}

model ClientTabData {
  id             String  @id @default(cuid())
  clientId       String
  tabId          String
  data           String  @default("{}")
  history        String  @default("[]")
  lastModifiedBy String?
  notes          String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  client Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tab    BusinessTypeTab @relation(fields: [tabId], references: [id], onDelete: Cascade)
  
  @@unique([clientId, tabId])
  @@map("client_tab_data")
}

model TabFieldTemplate {
  id          String  @id @default(cuid())
  name        String
  category    String
  description String?
  fields      String
  validation  String  @default("{}")
  layout      String  @default("{}")
  active      Boolean @default(true)
  isSystem    Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("tab_field_templates")
}

// ======================
// ODONTOLOGIA
// ======================

model DentalTreatment {
  id                String  @id @default(cuid())
  name              String  @unique
  category          String
  description       String?
  estimatedDuration Int?
  averagePrice      Float?
  color             String? @default("#3b82f6")
  active            Boolean @default(true)
  isCustom          Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  toothTreatments ToothTreatment[]
  
  @@map("dental_treatments")
}

model ToothTreatment {
  id            String    @id @default(cuid())
  clientId      String
  toothId       Int
  treatmentId   String
  status        String    @default("PLANNED")
  notes         String?
  datePerformed DateTime?
  datePlanned   DateTime?
  price         Float?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  client    Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  treatment DentalTreatment @relation(fields: [treatmentId], references: [id])
  
  @@map("tooth_treatments")
}

// ======================
// PRODUTOS E TRANSAÇÕES
// ======================

model Product {
  id           String  @id @default(cuid())
  companyId    String
  name         String
  category     String?
  costPrice    Float
  salePrice    Float
  stock        Int     @default(0)
  active       Boolean @default(true)
  observations String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  
  @@index([companyId])
  @@map("products")
}

model Transaction {
  id            String   @id @default(cuid())
  companyId     String
  appointmentId String?  @unique
  clientId      String
  productId     String?
  amount        Float
  paymentMethod String
  status        String
  type          String
  description   String?
  paymentDate   DateTime?   // <- adicionado
  dueDate       DateTime?   // <- adicionado
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  appointment Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  client      Client       @relation(fields: [clientId], references: [id])
  product     Product?     @relation(fields: [productId], references: [id], onDelete: SetNull)
  
  @@index([companyId])
  @@index([appointmentId])
  @@index([clientId])
  @@map("transactions")
}


model Record {
  id            String   @id @default(cuid())
  companyId     String
  appointmentId String   @unique
  clientId      String
  services      String
  products      String?
  notes         String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  appointment Appointment @relation(fields: [appointmentId], references: [id])
  client      Client      @relation(fields: [clientId], references: [id])
  
  @@index([companyId])
  @@index([clientId])
  @@map("records")
}

// ======================
// DOCUMENTOS
// ======================

model ClientDocument {
  id           String   @id @default(cuid())
  clientId     String
  name         String
  originalName String
  type         String
  size         Int
  category     String
  description  String?
  filePath     String
  thumbnailPath String?
  tags         String   @default("[]")
  uploadDate   DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@index([clientId])
  @@index([category])
  @@map("client_documents")
}

// ======================
// NOTAS CLÍNICAS
// ======================

model ClinicalNote {
  id            String   @id @default(cuid())
  companyId     String
  clientId      String
  appointmentId String?
  type          String
  meta          String?
  title         String?
  content       String
  createdBy     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  client      Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  appointment Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  
  @@index([companyId])
  @@index([clientId])
  @@index([appointmentId])
  @@map("clinical_notes")
}

// ======================
// WHATSAPP LOGS
// ======================

model WhatsAppLog {
  id            String   @id @default(cuid())
  companyId     String
  clientId      String?
  appointmentId String?
  phone         String
  message       String
  direction     String   // "INCOMING" | "OUTGOING"
  messageSid    String?
  paid          Boolean  @default(false)
  cost          Float?
  status        String?
  
  createdAt DateTime @default(now())
  
  appointment Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  
  @@index([companyId])
  @@index([clientId])
  @@index([appointmentId])
  @@index([phone])
  @@index([createdAt])
  @@map("whatsapp_logs")
}

// ======================
// ENUMS
// ======================

enum Role {
  USER
  ADMIN
  @@map("user_role")
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
  @@map("week_day")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  @@map("subscription_status")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  RESCHEDULED
  CANCELLED
  COMPLETED
  OVERDUE
  NO_SHOW
  @@map("appointment_status")
}
